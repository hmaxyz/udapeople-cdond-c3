version: 2.1

orbs:
  slack: circleci/slack@4.3.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "destroying stack udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

            echo "destroying stack udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

            echo "destroying bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: 
      workflow_id:
          type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl to get last migration status from kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/39aAvi3nFTRWeu2VMdWWQC/migration_${workflow_id})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PD3KA5PD
          event: pass
          template: basic_success_1

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - slack/notify:
          channel: C03PD3KA5PD
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PD3KA5PD
          event: pass
          template: basic_success_1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query "Reservations[*].Instances[*].PublicIpAddress"  \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt

            curl https://kvdb.io/RSXGKMfzHxp3zMMi63Aczo/IP \
                -d $(aws ec2 describe-instances \
                --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)

      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment: 
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["50:23:0c:56:90:20:87:6a:ed:4e:1b:49:f5:41:86:b5"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible

      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            cat inventory.txt
            echo PWD $(pwd)
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure
      # - destroy-environment: 
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install

            # Run and save the migration output
            npm run migrations > migrations_dump.txt

            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl --insecure https://kvdb.io/39aAvi3nFTRWeu2VMdWWQC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
                  curl --insecure https://kvdb.io/39aAvi3nFTRWeu2VMdWWQC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0' 
              fi

      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
            
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl https://kvdb.io/RSXGKMfzHxp3zMMi63Aczo/IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            cd frontend
            npm install
            npm run build
            ls -alh
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive

      # Here's where you will add some code to rollback on failure   
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.11.0b4-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["50:23:0c:56:90:20:87:6a:ed:4e:1b:49:f5:41:86:b5"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update openssh-server
            apk add --update curl
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files 
            cp -p artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo "${OldWorkflowID}" >> OldWorkflowID.txt

            cat OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Remove old stacks and files
          command: |
            cat OldWorkflowID.txt

            OldWorkflowID=$(cat OldWorkflowID.txt)

             echo OldWorkflowID: "${OldWorkflowID}"

            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            echo "s3://udapeople-${OldWorkflowID}"

            if [[ ${CIRCLE_WORKFLOW_ID:0:7} != ${OldWorkflowID} ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "------------------------------Nothing to Clean-------------------------------"
            fi

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation list-exports \
  #           --query "Exports[?Name=='WorkflowID'].Value" \
  #           --no-paginate --output text)

  #           echo OldWorkflowID: "${OldWorkflowID}"

  #           echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

  #           export STACKS=$(aws cloudformation list-stacks \
  #           --query "StackSummaries[*].StackName" \
  #           --stack-status-filter CREATE_COMPLETE \
  #           --no-paginate --output text)

  #           echo Stack names: "${STACKS[@]}"

  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation list-exports \
  #           --query "Exports[?Name=='WorkflowID'].Value" \
  #           --no-paginate --output text)
  #           echo "OldWorkflowID: ${OldWorkflowID}"
  #           echo "CurrentStack: ${CIRCLE_WORKFLOW_ID:0:7}"

  #           if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
  #           then

  #             echo "Deleting s3://udapeople-${OldWorkflowID}"
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive

  #             echo "Deleting udapeople-backend-${OldWorkflowID} stack"
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"

  #             echo "Deleting udapeople-frontend-${OldWorkflowID} stack"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

  #           else
  #             echo "Cannot Cleanup"
  #           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]